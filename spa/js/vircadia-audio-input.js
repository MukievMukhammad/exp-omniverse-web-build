const t=new class{SAMPLE_RATE=24e3;STEREO=2;NETWORK_FRAME_SAMPLES_STEREO=480;NETWORK_FRAME_SAMPLES_PER_CHANNEL=240;NETWORK_FRAME_SECS=this.NETWORK_FRAME_SAMPLES_PER_CHANNEL/this.SAMPLE_RATE;NETWORK_FRAME_MSECS=1e3*this.NETWORK_FRAME_SECS;AUDIO_WORKLET_BLOCK_SIZE=128};class s extends AudioWorkletProcessor{FLOAT_TO_INT=32767;LITTLE_ENDIAN=!0;_channelCount;_output;_outputView;_outputSize;_outputSampleSize;_outputIndex=0;_inputSampleRate;_inputFraction=0;_inputSampleCount=0;_downsampleRatio=1;_inputAccumulator=[0,0];_upsampleRatio=1;_lastInputValues=[0,0];_processor;_haveReportedUpSampleError=!1;constructor(s){super(s),this._channelCount=s?.channelCount?s.channelCount:1,this._channelCount=Math.min(this._channelCount,2),this._inputSampleRate=sampleRate,this._inputSampleRate===t.SAMPLE_RATE?this._processor=this._convert:this._inputSampleRate>t.SAMPLE_RATE?(this._processor=this._downsample,this._downsampleRatio=t.SAMPLE_RATE/this._inputSampleRate,this._inputFraction=0):(this._processor=this._upsample,this._upsampleRatio=this._inputSampleRate/t.SAMPLE_RATE,this._inputFraction=this._upsampleRatio),this._outputSize=1===this._channelCount?t.NETWORK_FRAME_SAMPLES_PER_CHANNEL:t.NETWORK_FRAME_SAMPLES_STEREO,this._outputSampleSize=this._outputSize/this._channelCount,this._output=new Int16Array(this._outputSize),this._outputView=new DataView(this._output.buffer),this.port.onmessage=this.onMessage}onMessage=t=>{"clear"===t.data&&(this._resetInput(),this._resetOutput())};process(t){return!(t&&t[0]&&t[0][0])||2===this._channelCount&&!t[0][1]||(this._processor(t[0]),!0)}_resetOutput(){this._output=new Int16Array(this._outputSize),this._outputView=new DataView(this._output.buffer),this._outputIndex=0}_resetInput(){this._inputSampleCount=0,this._inputFraction=0,this._inputAccumulator=[0,0]}_convert=t=>{const s=2*this._channelCount;for(let i=0,u=t[0].length;i<u;i++){const u=this._outputIndex*s;for(let s=0;s<this._channelCount;s++){const e=t[s][i],n=2*s;this._outputView.setInt16(u+n,e*this.FLOAT_TO_INT,this.LITTLE_ENDIAN)}this._outputIndex+=1,this._outputIndex===this._outputSampleSize&&(this.port.postMessage(this._output.buffer,[this._output.buffer]),this._resetOutput())}};_downsample=t=>{const s=2*this._channelCount;for(let i=0,u=t[0].length;i<u;i++){if(this._inputSampleCount+=1,this._inputFraction+this._downsampleRatio<1&&this._inputSampleCount!==this._inputSampleRate)for(let s=0;s<this._channelCount;s++)this._inputAccumulator[s]+=t[s][i],this._inputFraction+=this._downsampleRatio;else{const u=this._outputIndex*s;for(let s=0;s<this._channelCount;s++){const e=(1-this._inputFraction)/this._downsampleRatio,n=t[s][i];this._inputAccumulator[s]+=e*n;const _=2*s;this._outputView.setInt16(u+_,this._inputAccumulator[s]*this._downsampleRatio*this.FLOAT_TO_INT,this.LITTLE_ENDIAN);const o=1-e;this._inputFraction=o*this._downsampleRatio,this._inputAccumulator[s]=o*n}this._outputIndex+=1}this._outputIndex===this._outputSampleSize&&(this.port.postMessage(this._output.buffer,[this._output.buffer]),this._resetOutput()),this._inputSampleCount===this._inputSampleRate&&this._resetInput()}};_upsample=t=>{const s=2*this._channelCount,i=t[0].length;let u=0,e=[];for(let s=0;s<this._channelCount;s++)e.push(t[s][0]);for(;u<i;){const n=this._outputIndex*s;for(let t=0;t<this._channelCount;t++){const s=2*t,i=this._lastInputValues[t],u=e[t];this._outputView.setInt16(n+s,i+this._inputFraction*(u-i)*this.FLOAT_TO_INT,this.LITTLE_ENDIAN)}if(this._outputIndex+=1,this._outputIndex===this._outputSampleSize&&(this.port.postMessage(this._output.buffer,[this._output.buffer]),this._resetOutput()),this._inputFraction+=this._upsampleRatio,this._inputFraction>1){if(this._lastInputValues=e,u+=1,u<i){this._inputSampleCount+=1,e=[];for(let s=0;s<this._channelCount;s++)e.push(t[s][u])}this._inputFraction-=1}this._inputSampleCount===this._inputSampleRate&&this._resetInput()}}}registerProcessor("vircadia-audio-input-processor",s);
//# sourceMappingURL=vircadia-audio-input.js.map